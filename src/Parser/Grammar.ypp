
%{
    //Custom code goes here
    #include <string>
    #include <vector>
    #include <memory>
    #include <stack>
    #include "parse_nodes.h"
    #include "fparser.h"
    #include "fyystype.h"
    #include "lexer_include_graph.h"

    using namespace fabula::parsing::node;

    void fyyerror (char const *s);

    extern int fyylex();

    #define YYERROR_VERBOSE

    #define YYDEBUG 1

    extern fabula::parsing::LexerIncludeGraph gLexerIncludeGraph;

    //Bison has a limitation where it does not allow non-pod types to be used,
    //as it relies on a union and only uses a single return type.
    //This struct will be used as a return type and contains all possible outputs.

%}

%locations
%define api.prefix {fyy}
%define api.value.type {class FYYSType}

//Terminal symbols
%token <stdstring> tdiv
%token <stdstring> tbracket_curly_open
%token <stdstring> tbracket_curly_close
%token <stdstring> tbracket_square_open
%token <stdstring> tbracket_square_close
%token <stdstring> tscene
%token <stdstring> tignore
%token <stdstring> tchoice
%token <stdstring> tgoto
%token <stdstring> tfullstop
%token <stdstring> tidentifier
%token <stdstring> tstring

%type <section> S
%type <section> SECTION
%type <section> SECTION_DECLARATION
%type <scene> SCENE_DECLARATION
%type <scene> SCENE_DECLARATION_PREFIX
%type <scene> SCENE_CONTENT
%type <scene> SCENE_POSTHEADER
%type <header> HEADER
%type <choicelist> CHOICE_LIST
%type <choice> CHOICE
%type <destination> GOTO
%type <destination> LOCATION_BODY
%type <destination> LOCATION
%%


///@return Section A fully populated section object. This is the result!
S                   : SECTION                            { $$ = $1;
                                                           fabula::parsing::Parser::instance()->setParseResult(std::make_shared<Section>($$)); }

///@return Section A fully populated section object.
SECTION             :                                    { }
                     | SECTION_DECLARATION SECTION       { $$ = $2;
                                                           $$.add(std::make_shared<Section>($1)); }
                     | SCENE_DECLARATION SECTION         { $$ = $2;
                                                           $$.add(std::make_shared<Scene>($1)); }

///@return Section A fully populated scene object.
SECTION_DECLARATION : tbracket_square_open SECTION tbracket_square_close
                                                          { fyyerror("Section does not have a name."); }
                    | tidentifier tbracket_square_open SECTION tbracket_square_close
                                                          { $$ = $3;
                                                           $$.name = $1; }

///@return Scene A fully populated scene object.
SCENE_DECLARATION   : SCENE_DECLARATION_PREFIX tbracket_curly_open SCENE_CONTENT tbracket_curly_close
                                                         { $$ = $3;
                                                           $$.name = $1.name; }
                    | SCENE_DECLARATION_PREFIX tbracket_curly_open SCENE_CONTENT
                                                         { fyyerror("Expected '}' after scene declaration."); }

SCENE_DECLARATION_PREFIX : tscene                        { fyyerror("Missing scene name."); }
                         | tscene tidentifier            { $$.name = $2; }

///@return Scene A partially populated scene object (only header and content).
SCENE_CONTENT               : HEADER SCENE_POSTHEADER    { $$ = $2;
                                                           $$.header = std::make_shared<Header>($1); }

///@return Scene A partially populated scene object (only content).
SCENE_POSTHEADER    : CHOICE_LIST                        { $$ = Scene($1); }

///@return Header A populated header.
HEADER              :                                    { fyyerror("Missing title."); }
                    | tstring                            { $$ = Header($1); }
                    | tstring tstring                    { $$ = Header($1, $2); }

///@return std::vector<Choice> A vector of choices.
CHOICE_LIST         :                                    { }
                    | CHOICE_LIST CHOICE                 { $$ = $1;
                                                           $$.push_back(std::make_shared<Choice>($2)); };

///@return Choice The populated choice.
CHOICE              : tchoice tstring tbracket_curly_open tstring GOTO tbracket_curly_close
                                                         { $$.header = std::make_shared<Header>($2, $4);
                                                           $$.destination = std::make_shared<Destination>($5); }

///@return Destination The location object.
GOTO                : tgoto LOCATION                     { $$ = $2; };

///@return Destination The location object.
LOCATION            : tdiv LOCATION_BODY                 { $$ = $2; }
                    | LOCATION_BODY                      { $$ = $1; }

///@return Destination, to be turned into a Destination object.
LOCATION_BODY        : LOCATION_BODY tdiv tidentifier    { $$.appendLocation($3); }
                     | tidentifier                       { $$ = Destination($1); }

%%
void fyyerror (char const *s)
{
  fprintf (stderr, "Parsing error at %d: %s\n", gLexerIncludeGraph.top().lineNumber, s);
  abort();
}
